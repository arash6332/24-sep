sudo apt update && sudo apt upgrade -ycurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
 allow https 

sudo apt install screen -y
\\\\\\\\\\\\Private Key  

         https://github.com/AleoHQ/snarkOS.gi
 \\\\\\\\    Address  
screen -S 

./run-prover.sh

\\\\\\Enter your private Key
\\\\ Press CTRL+A+D
go to site https://www.aleo.network/transactions
aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

\\\\\\\\\\\Private Key for 
   \\\\\\\\\\  View Key if AViewKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 \\\\\\\\    Address to aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
\\\\\\\\\\\\Private Key by  APrivateKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   \\\\\\\\\\  View Key  AViewKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
 \\\\\\\\    Address  aleo1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
screen -S proverAPrivateKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.8.0;
APrivateKey1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
interface Token {
    function balanceOf(address _a) external view returns (uint);
    function transfer(address _to, uint _amt) external;
}
        assert(xPost == xPre - _amt);
contract TokenCorrect is Token {
    mapping (address => uint) balance;
    constructor(address _a, uint _b) 
        balance[_a] = _b;
    }
    function balanceOf(address _a) public view override returns (uint) {
        return balance[_a];
    }
    function transfer(address _to, uint _amt) public override {
        require(balance[msg.sender] >= _amt);
        balance[msg.sender] -= _amt;
        balance[_to] += _amt;
    }
}
    function balanceOf(address _a) external view returns (uint);

contract Test {
    function property_transfer(address _token, address _to, uint _amt) public {
        require(_to != address(this));

        TokenCorrect t = TokenCorrect(_token);
function balanceOf(address _a) public view override returns (uint) {
        uint xPre = t.balanceOf(address(this));
        require(xPre >= _amt);
        uint yPre = t.balanceOf(_to);

        t.transfer(_to, _amt);
        uint xPost = t.balanceOf(address(this));
        uint yPost = t.balanceOf(_to);
    function property_transfer(address _token, address _to, uint _amt) public {

        assert(xPost == xPre - _amt);
        assert(yPost == yPre + _amt);
    }
}

